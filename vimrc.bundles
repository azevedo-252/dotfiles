if &compatible
  set nocompatible              " be iMproved
end

filetype off                  " required!
" Vundle is the new god among plugins
set rtp+=~/.vim/bundle/Vundle.vim/
call vundle#begin()

" let Vundle manage Vundle
Plugin 'gmarik/Vundle.vim'

" Plugin 'FuzzyFinder'
" Plugin 'SirVer/ultisnips'
" Plugin 'honza/vim-snippets'
" Plugin 'terryma/vim-multiple-cursors'
" Plugin 'tpope/vim-dispatch'
" Plugin 'vim-scripts/ctags.vim'
" Plugin 'azevedo-252/vim-angular'
" Plugin 'rizzatti/dash.vim'
Plugin 'L9'
Plugin 'chriskempson/base16-vim'
Plugin 'christoomey/vim-conflicted'
Plugin 'digitaltoad/vim-pug'
Plugin 'ecomba/vim-ruby-refactoring'
Plugin 'gavocanov/vim-js-indent'
Plugin 'kana/vim-textobj-user'
Plugin 'kchmck/vim-coffee-script'
Plugin 'kien/ctrlp.vim'
Plugin 'ktonga/vim-follow-my-lead'
Plugin 'leafgarland/typescript-vim'
Plugin 'mhinz/vim-startify'
Plugin 'mxw/vim-jsx'
Plugin 'nicholaides/words-to-avoid.vim'
Plugin 'pangloss/vim-javascript'
Plugin 'reedes/vim-textobj-quote'
Plugin 'reedes/vim-wordy'
Plugin 'rking/ag.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'skwp/greplace.vim'
Plugin 'slim-template/vim-slim'
Plugin 'thoughtbot/vim-rspec'
Plugin 'tmhedberg/matchit'
Plugin 'tpope/vim-endwise'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-rails.git'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-surround'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'vim-ruby/vim-ruby'
Plugin 'vim-scripts/tComment'
Plugin 'w0rp/ale'
Plugin 'wellle/targets.vim'


"""""""""""""""""""""""""""
" => nerdtree
"""""""""""""""""""""""""""
" Hide NERDTree
let NERDTreeShowHidden=1

" Toggle NERDTree
nmap <leader>nt :NERDTreeToggle<cr>

" Toggle NERDTree and select current buffer
map <leader>nc :NERDTreeFind<cr>


""""""""""""""""""""""""""""""
" => ctrlp.vim
""""""""""""""""""""""""""""""
" Shortcut
map <C-p> <ESC>:CtrlP

" Local working directory
let g:ctrlp_working_path_mode = 'ra'

" Ignore files
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*/fixtures/*,*/functional/*  " MacOSX/Linux
let g:ctrlp_custom_ignore = {
  \ 'dir': '\.git$\|\.hg$\|\.svn$',
  \ 'file': '\v\.(exe|so|dll|class|png|jpg|jpeg)$',
\}

" Enable opening at most 4 files with <c-z> and <c-o> in a new tab
let g:ctrlp_open_multiple_files = '4t'

" if the fileâ€™s already opened somewhere CtrlP will try to jump to it instead of opening a new instance
let g:ctrlp_switch_buffer = 2

" the newly created file is opened in a new vertical split when pressing <c-y>
let g:ctrlp_open_new_file = 'v'

" Use The Silver Searcher https://github.com/ggreer/the_silver_searcher
if executable('ag')
  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif


""""""""""""""""""""""""""""""
" => vim-airline
""""""""""""""""""""""""""""""
let g:airline_theme = 'angr'
" Displays ALE's error information
let g:airline#extensions#ale#enabled = 1

""""""""""""""""""""""""""""""
" => ALE
""""""""""""""""""""""""""""""
" run linters only when saving files
let g:ale_lint_on_save = 1
" don't lint when text changes
let g:ale_lint_on_text_changed = 'never'
" don't lint when opening a file
let g:ale_lint_on_enter = 0

""""""""""""""""""""""""""""""
" => tComment
""""""""""""""""""""""""""""""
"Faster shortcut for commenting
map <leader>c <c-_><c-_>


""""""""""""""""""""""""""""""
" => vim-rspec
""""""""""""""""""""""""""""""
map <Leader>rf :call RunCurrentSpecFile()<CR>
map <Leader>r. :call RunNearestSpec()<CR>
map <Leader>rl :call RunLastSpec()<CR>
map <Leader>ra :call RunAllSpecs()<CR>


""""""""""""""""""""""""""""""
" vim-conflicted
""""""""""""""""""""""""""""""
set stl+=%{ConflictedVersion()}


""""""""""""""""""""""""""""""
" dash.vim
""""""""""""""""""""""""""""""
nmap <silent> <leader>d <Plug>DashSearch


""""""""""""""""""""""""""""""
" => vim-multiple-cursors
""""""""""""""""""""""""""""""
" NOTE TO SELF: not my configurations: TRY THEM
" let g:multi_cursor_use_default_mapping = 0
" let g:multi_cursor_next_key = '<C-j>'
" let g:multi_cursor_prev_key = '<C-k>'
" let g:multi_cursor_skip_key = '<C-x>'
" let g:multi_cursor_quit_key = '<Esc>'


""""""""""""""""""""""""""""""
" => ultisnips
""""""""""""""""""""""""""""""
" NOTE TO SELF: not my configurations: TRY THEM
" nmap <leader>U :call UltiSnips#ListSnippets()<cr>
"
" " Complete UltiSnip snippets with <tab>
" function! g:UltiSnips_Complete()
"     call UltiSnips#ExpandSnippet()
"     if g:ulti_expand_res == 0
"         if pumvisible()
"             return "\<C-n>"
"         else
"             call UltiSnips#JumpForwards()
"             if g:ulti_jump_forwards_res == 0
"                return "\<TAB>"
"             endif
"         endif
"     endif
"     return ''
" endfunction
"
" au InsertEnter * exec 'inoremap <silent> ' . g:UltiSnipsExpandTrigger . ' <C-R>=g:UltiSnips_Complete()<cr>'
"
" let g:UltiSnipsExpandTrigger = '<tab>'
" let g:UltiSnipsJumpForwardTrigger = '<tab>'
" let g:UltiSnipsJumpBackwardTrigger = '<s-tab>'


""""""""""""""""""""""""""""""
" => ctags.vim
""""""""""""""""""""""""""""""
" NOTE TO SELF: not my configurations: TRY THEM
" " Exclude Javascript files in :Rtags via rails.vim due to warnings when parsing
" let g:Tlist_Ctags_Cmd="ctags --exclude='*.js'"
"
" " Index ctags from any project, including those outside Rails
" map <Leader>ct :!ctags -R .<CR>
"
" " Use the current file and ctags when finding keywords
" set complete=.,t
"
" " To open tag in preview window: C-w }

""""""""""""""""""""""""""""""
" => vim-javascript
""""""""""""""""""""""""""""""
let g:javascript_enable_domhtmlcss = 1

""""""""""""""""""""""""""""""
" => vim-angular
""""""""""""""""""""""""""""""
" " Ignore these folders when searching
" let g:angular_find_ignore = ['build/']
" " Assumes a snakecase convention when searching
" let g:angular_filename_convention = 'snakecased'
" " Replaces mocha keywords for running isolated specs
" let g:angular_testing_framework = 'mocha'

""""""""""""""""""""""""""""""
" => vim-wordy
""""""""""""""""""""""""""""""
" filetype plugin on
" augroup textobj_quote
"   autocmd!
"   autocmd FileType markdown call textobj#quote#init()
"   autocmd FileType textile call textobj#quote#init()
"   autocmd FileType text call textobj#quote#init({'educate': 0})
" augroup END

""""""""""""""""""""""""""""""
" => mxw/vim-jsx
""""""""""""""""""""""""""""""
" JSX in .js files
let g:jsx_ext_required = 0

call vundle#end()
filetype on
